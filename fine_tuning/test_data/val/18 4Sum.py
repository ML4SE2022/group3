class Solution : NEW_LINE INDENT def fourSum ( self , nums : List [ int ] , target : int ) : NEW_LINE INDENT ans = [ ] NEW_LINE def nSum ( l : int , r : int , target : int , n : int , path : List [ int ] , ans : List [ List [ int ] ] ) -> None : NEW_LINE INDENT if r - l + 1 < n or n < 2 or target < nums [ l ] * n or target > nums [ r ] * n : NEW_LINE INDENT return NEW_LINE DEDENT if n == 2 : NEW_LINE INDENT while l < r : NEW_LINE INDENT summ = nums [ l ] + nums [ r ] NEW_LINE if summ == target : NEW_LINE INDENT ans . append ( path + [ nums [ l ] , nums [ r ] ] ) NEW_LINE l += 1 NEW_LINE while nums [ l ] == nums [ l - 1 ] and l < r : NEW_LINE INDENT l += 1 NEW_LINE DEDENT DEDENT elif summ < target : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT return NEW_LINE DEDENT for i in range ( l , r + 1 ) : NEW_LINE INDENT if i > l and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT nSum ( i + 1 , r , target - nums [ i ] , n - 1 , path + [ nums [ i ] ] , ans ) NEW_LINE DEDENT DEDENT nums . sort ( ) NEW_LINE nSum ( 0 , len ( nums ) - 1 , target , 4 , [ ] , ans ) NEW_LINE return ans NEW_LINE DEDENT DEDENT