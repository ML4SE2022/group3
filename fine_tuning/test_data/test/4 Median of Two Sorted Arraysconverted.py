class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT n1 = len ( nums1 ) NEW_LINE n2 = len ( nums2 ) NEW_LINE if n1 > n2 : NEW_LINE INDENT return self . findMedianSortedArrays ( nums2 , nums1 ) NEW_LINE DEDENT l = 0 NEW_LINE r = n1 NEW_LINE while l <= r : NEW_LINE INDENT partition1 = ( l + r ) // 2 NEW_LINE partition2 = ( n1 + n2 + 1 ) // 2 - partition1 NEW_LINE maxLeft1 = - 2 ** 31 if partition1 == 0 else nums1 [ partition1 - 1 ] NEW_LINE maxLeft2 = - 2 ** 31 if partition2 == 0 else nums2 [ partition2 - 1 ] NEW_LINE minRight1 = 2 ** 31 - 1 if partition1 == n1 else nums1 [ partition1 ] NEW_LINE minRight2 = 2 ** 31 - 1 if partition2 == n2 else nums2 [ partition2 ] NEW_LINE if maxLeft1 <= minRight2 and maxLeft2 <= minRight1 : NEW_LINE INDENT return ( max ( maxLeft1 , maxLeft2 ) + min ( minRight1 , minRight2 ) ) * 0.5 if ( n1 + n2 ) % 2 == 0 else max ( maxLeft1 , maxLeft2 ) NEW_LINE DEDENT elif maxLeft1 > minRight2 : NEW_LINE INDENT r = partition1 - 1 NEW_LINE DEDENT else : NEW_LINE INDENT l = partition1 + 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT