class Solution : NEW_LINE INDENT def longestPalindrome ( self , s ) : NEW_LINE INDENT if not s : NEW_LINE INDENT return ' ' NEW_LINE DEDENT indices = [ 0 , 0 ] NEW_LINE def extend ( s : str , i : int , j : int ) -> Tuple [ int , int ] : NEW_LINE INDENT while i >= 0 and j < len ( s ) : NEW_LINE INDENT if s [ i ] != s [ j ] : NEW_LINE INDENT break NEW_LINE DEDENT i -= 1 NEW_LINE j += 1 NEW_LINE DEDENT return i + 1 , j - 1 NEW_LINE DEDENT for i in range ( len ( s ) ) : NEW_LINE INDENT l1 , r1 = extend ( s , i , i ) NEW_LINE if r1 - l1 > indices [ 1 ] - indices [ 0 ] : NEW_LINE INDENT indices = l1 , r1 NEW_LINE DEDENT if i + 1 < len ( s ) and s [ i ] == s [ i + 1 ] : NEW_LINE INDENT l2 , r2 = extend ( s , i , i + 1 ) NEW_LINE if r2 - l2 > indices [ 1 ] - indices [ 0 ] : NEW_LINE INDENT indices = l2 , r2 NEW_LINE DEDENT DEDENT DEDENT return s [ indices [ 0 ] : indices [ 1 ] + 1 ] NEW_LINE DEDENT DEDENT