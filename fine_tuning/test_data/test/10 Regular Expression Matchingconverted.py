class Solution : NEW_LINE INDENT def isMatch ( self , s : str , p : str ) -> bool : NEW_LINE INDENT m = len ( s ) NEW_LINE n = len ( p ) NEW_LINE dp = [ [ False ] * ( n + 1 ) for _ in range ( m + 1 ) ] NEW_LINE dp [ 0 ] [ 0 ] = True NEW_LINE def isMatch ( i : int , j : int ) -> bool : NEW_LINE INDENT return j >= 0 and p [ j ] == ' . ' or s [ i ] == p [ j ] NEW_LINE DEDENT for j , c in enumerate ( p ) : NEW_LINE INDENT if c == ' * ' and dp [ 0 ] [ j - 1 ] : NEW_LINE INDENT dp [ 0 ] [ j + 1 ] = True NEW_LINE DEDENT DEDENT for i in range ( m ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if p [ j ] == ' * ' : NEW_LINE INDENT noRepeat = dp [ i + 1 ] [ j - 1 ] NEW_LINE doRepeat = isMatch ( i , j - 1 ) and dp [ i ] [ j + 1 ] NEW_LINE dp [ i + 1 ] [ j + 1 ] = noRepeat or doRepeat NEW_LINE DEDENT elif isMatch ( i , j ) : NEW_LINE INDENT dp [ i + 1 ] [ j + 1 ] = dp [ i ] [ j ] NEW_LINE DEDENT DEDENT DEDENT return dp [ m ] [ n ] NEW_LINE DEDENT DEDENT